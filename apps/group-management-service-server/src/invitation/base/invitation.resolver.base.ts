/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Invitation } from "./Invitation";
import { InvitationCountArgs } from "./InvitationCountArgs";
import { InvitationFindManyArgs } from "./InvitationFindManyArgs";
import { InvitationFindUniqueArgs } from "./InvitationFindUniqueArgs";
import { CreateInvitationArgs } from "./CreateInvitationArgs";
import { UpdateInvitationArgs } from "./UpdateInvitationArgs";
import { DeleteInvitationArgs } from "./DeleteInvitationArgs";
import { InvitationService } from "../invitation.service";
@graphql.Resolver(() => Invitation)
export class InvitationResolverBase {
  constructor(protected readonly service: InvitationService) {}

  async _invitationsMeta(
    @graphql.Args() args: InvitationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Invitation])
  async invitations(
    @graphql.Args() args: InvitationFindManyArgs
  ): Promise<Invitation[]> {
    return this.service.invitations(args);
  }

  @graphql.Query(() => Invitation, { nullable: true })
  async invitation(
    @graphql.Args() args: InvitationFindUniqueArgs
  ): Promise<Invitation | null> {
    const result = await this.service.invitation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Invitation)
  async createInvitation(
    @graphql.Args() args: CreateInvitationArgs
  ): Promise<Invitation> {
    return await this.service.createInvitation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Invitation)
  async updateInvitation(
    @graphql.Args() args: UpdateInvitationArgs
  ): Promise<Invitation | null> {
    try {
      return await this.service.updateInvitation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Invitation)
  async deleteInvitation(
    @graphql.Args() args: DeleteInvitationArgs
  ): Promise<Invitation | null> {
    try {
      return await this.service.deleteInvitation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
