/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InsurancePlanService } from "../insurancePlan.service";
import { InsurancePlanCreateInput } from "./InsurancePlanCreateInput";
import { InsurancePlan } from "./InsurancePlan";
import { InsurancePlanFindManyArgs } from "./InsurancePlanFindManyArgs";
import { InsurancePlanWhereUniqueInput } from "./InsurancePlanWhereUniqueInput";
import { InsurancePlanUpdateInput } from "./InsurancePlanUpdateInput";

export class InsurancePlanControllerBase {
  constructor(protected readonly service: InsurancePlanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InsurancePlan })
  async createInsurancePlan(
    @common.Body() data: InsurancePlanCreateInput
  ): Promise<InsurancePlan> {
    return await this.service.createInsurancePlan({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InsurancePlan] })
  @ApiNestedQuery(InsurancePlanFindManyArgs)
  async insurancePlans(
    @common.Req() request: Request
  ): Promise<InsurancePlan[]> {
    const args = plainToClass(InsurancePlanFindManyArgs, request.query);
    return this.service.insurancePlans({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InsurancePlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async insurancePlan(
    @common.Param() params: InsurancePlanWhereUniqueInput
  ): Promise<InsurancePlan | null> {
    const result = await this.service.insurancePlan({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InsurancePlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInsurancePlan(
    @common.Param() params: InsurancePlanWhereUniqueInput,
    @common.Body() data: InsurancePlanUpdateInput
  ): Promise<InsurancePlan | null> {
    try {
      return await this.service.updateInsurancePlan({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InsurancePlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInsurancePlan(
    @common.Param() params: InsurancePlanWhereUniqueInput
  ): Promise<InsurancePlan | null> {
    try {
      return await this.service.deleteInsurancePlan({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
