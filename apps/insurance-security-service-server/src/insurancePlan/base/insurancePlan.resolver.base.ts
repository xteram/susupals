/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InsurancePlan } from "./InsurancePlan";
import { InsurancePlanCountArgs } from "./InsurancePlanCountArgs";
import { InsurancePlanFindManyArgs } from "./InsurancePlanFindManyArgs";
import { InsurancePlanFindUniqueArgs } from "./InsurancePlanFindUniqueArgs";
import { DeleteInsurancePlanArgs } from "./DeleteInsurancePlanArgs";
import { InsurancePlanService } from "../insurancePlan.service";
@graphql.Resolver(() => InsurancePlan)
export class InsurancePlanResolverBase {
  constructor(protected readonly service: InsurancePlanService) {}

  async _insurancePlansMeta(
    @graphql.Args() args: InsurancePlanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InsurancePlan])
  async insurancePlans(
    @graphql.Args() args: InsurancePlanFindManyArgs
  ): Promise<InsurancePlan[]> {
    return this.service.insurancePlans(args);
  }

  @graphql.Query(() => InsurancePlan, { nullable: true })
  async insurancePlan(
    @graphql.Args() args: InsurancePlanFindUniqueArgs
  ): Promise<InsurancePlan | null> {
    const result = await this.service.insurancePlan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InsurancePlan)
  async deleteInsurancePlan(
    @graphql.Args() args: DeleteInsurancePlanArgs
  ): Promise<InsurancePlan | null> {
    try {
      return await this.service.deleteInsurancePlan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
