/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InsuranceProviderService } from "../insuranceProvider.service";
import { InsuranceProviderCreateInput } from "./InsuranceProviderCreateInput";
import { InsuranceProvider } from "./InsuranceProvider";
import { InsuranceProviderFindManyArgs } from "./InsuranceProviderFindManyArgs";
import { InsuranceProviderWhereUniqueInput } from "./InsuranceProviderWhereUniqueInput";
import { InsuranceProviderUpdateInput } from "./InsuranceProviderUpdateInput";

export class InsuranceProviderControllerBase {
  constructor(protected readonly service: InsuranceProviderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InsuranceProvider })
  async createInsuranceProvider(
    @common.Body() data: InsuranceProviderCreateInput
  ): Promise<InsuranceProvider> {
    return await this.service.createInsuranceProvider({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InsuranceProvider] })
  @ApiNestedQuery(InsuranceProviderFindManyArgs)
  async insuranceProviders(
    @common.Req() request: Request
  ): Promise<InsuranceProvider[]> {
    const args = plainToClass(InsuranceProviderFindManyArgs, request.query);
    return this.service.insuranceProviders({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InsuranceProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async insuranceProvider(
    @common.Param() params: InsuranceProviderWhereUniqueInput
  ): Promise<InsuranceProvider | null> {
    const result = await this.service.insuranceProvider({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InsuranceProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInsuranceProvider(
    @common.Param() params: InsuranceProviderWhereUniqueInput,
    @common.Body() data: InsuranceProviderUpdateInput
  ): Promise<InsuranceProvider | null> {
    try {
      return await this.service.updateInsuranceProvider({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InsuranceProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInsuranceProvider(
    @common.Param() params: InsuranceProviderWhereUniqueInput
  ): Promise<InsuranceProvider | null> {
    try {
      return await this.service.deleteInsuranceProvider({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
