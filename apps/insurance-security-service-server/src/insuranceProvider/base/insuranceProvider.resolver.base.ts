/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InsuranceProvider } from "./InsuranceProvider";
import { InsuranceProviderCountArgs } from "./InsuranceProviderCountArgs";
import { InsuranceProviderFindManyArgs } from "./InsuranceProviderFindManyArgs";
import { InsuranceProviderFindUniqueArgs } from "./InsuranceProviderFindUniqueArgs";
import { DeleteInsuranceProviderArgs } from "./DeleteInsuranceProviderArgs";
import { InsuranceProviderService } from "../insuranceProvider.service";
@graphql.Resolver(() => InsuranceProvider)
export class InsuranceProviderResolverBase {
  constructor(protected readonly service: InsuranceProviderService) {}

  async _insuranceProvidersMeta(
    @graphql.Args() args: InsuranceProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InsuranceProvider])
  async insuranceProviders(
    @graphql.Args() args: InsuranceProviderFindManyArgs
  ): Promise<InsuranceProvider[]> {
    return this.service.insuranceProviders(args);
  }

  @graphql.Query(() => InsuranceProvider, { nullable: true })
  async insuranceProvider(
    @graphql.Args() args: InsuranceProviderFindUniqueArgs
  ): Promise<InsuranceProvider | null> {
    const result = await this.service.insuranceProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InsuranceProvider)
  async deleteInsuranceProvider(
    @graphql.Args() args: DeleteInsuranceProviderArgs
  ): Promise<InsuranceProvider | null> {
    try {
      return await this.service.deleteInsuranceProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
