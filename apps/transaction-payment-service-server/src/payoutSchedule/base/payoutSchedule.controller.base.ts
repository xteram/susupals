/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PayoutScheduleService } from "../payoutSchedule.service";
import { PayoutScheduleCreateInput } from "./PayoutScheduleCreateInput";
import { PayoutSchedule } from "./PayoutSchedule";
import { PayoutScheduleFindManyArgs } from "./PayoutScheduleFindManyArgs";
import { PayoutScheduleWhereUniqueInput } from "./PayoutScheduleWhereUniqueInput";
import { PayoutScheduleUpdateInput } from "./PayoutScheduleUpdateInput";

export class PayoutScheduleControllerBase {
  constructor(protected readonly service: PayoutScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PayoutSchedule })
  async createPayoutSchedule(
    @common.Body() data: PayoutScheduleCreateInput
  ): Promise<PayoutSchedule> {
    return await this.service.createPayoutSchedule({
      data: data,
      select: {
        createdAt: true,
        date: true,
        id: true,
        member: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PayoutSchedule] })
  @ApiNestedQuery(PayoutScheduleFindManyArgs)
  async payoutSchedules(
    @common.Req() request: Request
  ): Promise<PayoutSchedule[]> {
    const args = plainToClass(PayoutScheduleFindManyArgs, request.query);
    return this.service.payoutSchedules({
      ...args,
      select: {
        createdAt: true,
        date: true,
        id: true,
        member: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PayoutSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async payoutSchedule(
    @common.Param() params: PayoutScheduleWhereUniqueInput
  ): Promise<PayoutSchedule | null> {
    const result = await this.service.payoutSchedule({
      where: params,
      select: {
        createdAt: true,
        date: true,
        id: true,
        member: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PayoutSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePayoutSchedule(
    @common.Param() params: PayoutScheduleWhereUniqueInput,
    @common.Body() data: PayoutScheduleUpdateInput
  ): Promise<PayoutSchedule | null> {
    try {
      return await this.service.updatePayoutSchedule({
        where: params,
        data: data,
        select: {
          createdAt: true,
          date: true,
          id: true,
          member: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PayoutSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePayoutSchedule(
    @common.Param() params: PayoutScheduleWhereUniqueInput
  ): Promise<PayoutSchedule | null> {
    try {
      return await this.service.deletePayoutSchedule({
        where: params,
        select: {
          createdAt: true,
          date: true,
          id: true,
          member: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
