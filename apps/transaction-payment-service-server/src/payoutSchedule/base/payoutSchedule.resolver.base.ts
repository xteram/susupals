/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PayoutSchedule } from "./PayoutSchedule";
import { PayoutScheduleCountArgs } from "./PayoutScheduleCountArgs";
import { PayoutScheduleFindManyArgs } from "./PayoutScheduleFindManyArgs";
import { PayoutScheduleFindUniqueArgs } from "./PayoutScheduleFindUniqueArgs";
import { CreatePayoutScheduleArgs } from "./CreatePayoutScheduleArgs";
import { UpdatePayoutScheduleArgs } from "./UpdatePayoutScheduleArgs";
import { DeletePayoutScheduleArgs } from "./DeletePayoutScheduleArgs";
import { PayoutScheduleService } from "../payoutSchedule.service";
@graphql.Resolver(() => PayoutSchedule)
export class PayoutScheduleResolverBase {
  constructor(protected readonly service: PayoutScheduleService) {}

  async _payoutSchedulesMeta(
    @graphql.Args() args: PayoutScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PayoutSchedule])
  async payoutSchedules(
    @graphql.Args() args: PayoutScheduleFindManyArgs
  ): Promise<PayoutSchedule[]> {
    return this.service.payoutSchedules(args);
  }

  @graphql.Query(() => PayoutSchedule, { nullable: true })
  async payoutSchedule(
    @graphql.Args() args: PayoutScheduleFindUniqueArgs
  ): Promise<PayoutSchedule | null> {
    const result = await this.service.payoutSchedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PayoutSchedule)
  async createPayoutSchedule(
    @graphql.Args() args: CreatePayoutScheduleArgs
  ): Promise<PayoutSchedule> {
    return await this.service.createPayoutSchedule({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PayoutSchedule)
  async updatePayoutSchedule(
    @graphql.Args() args: UpdatePayoutScheduleArgs
  ): Promise<PayoutSchedule | null> {
    try {
      return await this.service.updatePayoutSchedule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PayoutSchedule)
  async deletePayoutSchedule(
    @graphql.Args() args: DeletePayoutScheduleArgs
  ): Promise<PayoutSchedule | null> {
    try {
      return await this.service.deletePayoutSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
