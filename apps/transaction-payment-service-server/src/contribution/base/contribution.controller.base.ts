/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContributionService } from "../contribution.service";
import { ContributionCreateInput } from "./ContributionCreateInput";
import { Contribution } from "./Contribution";
import { ContributionFindManyArgs } from "./ContributionFindManyArgs";
import { ContributionWhereUniqueInput } from "./ContributionWhereUniqueInput";
import { ContributionUpdateInput } from "./ContributionUpdateInput";

export class ContributionControllerBase {
  constructor(protected readonly service: ContributionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Contribution })
  async createContribution(
    @common.Body() data: ContributionCreateInput
  ): Promise<Contribution> {
    return await this.service.createContribution({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Contribution] })
  @ApiNestedQuery(ContributionFindManyArgs)
  async contributions(@common.Req() request: Request): Promise<Contribution[]> {
    const args = plainToClass(ContributionFindManyArgs, request.query);
    return this.service.contributions({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Contribution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contribution(
    @common.Param() params: ContributionWhereUniqueInput
  ): Promise<Contribution | null> {
    const result = await this.service.contribution({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Contribution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContribution(
    @common.Param() params: ContributionWhereUniqueInput,
    @common.Body() data: ContributionUpdateInput
  ): Promise<Contribution | null> {
    try {
      return await this.service.updateContribution({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Contribution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContribution(
    @common.Param() params: ContributionWhereUniqueInput
  ): Promise<Contribution | null> {
    try {
      return await this.service.deleteContribution({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
