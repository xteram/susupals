/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Contribution } from "./Contribution";
import { ContributionCountArgs } from "./ContributionCountArgs";
import { ContributionFindManyArgs } from "./ContributionFindManyArgs";
import { ContributionFindUniqueArgs } from "./ContributionFindUniqueArgs";
import { CreateContributionArgs } from "./CreateContributionArgs";
import { UpdateContributionArgs } from "./UpdateContributionArgs";
import { DeleteContributionArgs } from "./DeleteContributionArgs";
import { ContributionService } from "../contribution.service";
@graphql.Resolver(() => Contribution)
export class ContributionResolverBase {
  constructor(protected readonly service: ContributionService) {}

  async _contributionsMeta(
    @graphql.Args() args: ContributionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Contribution])
  async contributions(
    @graphql.Args() args: ContributionFindManyArgs
  ): Promise<Contribution[]> {
    return this.service.contributions(args);
  }

  @graphql.Query(() => Contribution, { nullable: true })
  async contribution(
    @graphql.Args() args: ContributionFindUniqueArgs
  ): Promise<Contribution | null> {
    const result = await this.service.contribution(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Contribution)
  async createContribution(
    @graphql.Args() args: CreateContributionArgs
  ): Promise<Contribution> {
    return await this.service.createContribution({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Contribution)
  async updateContribution(
    @graphql.Args() args: UpdateContributionArgs
  ): Promise<Contribution | null> {
    try {
      return await this.service.updateContribution({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Contribution)
  async deleteContribution(
    @graphql.Args() args: DeleteContributionArgs
  ): Promise<Contribution | null> {
    try {
      return await this.service.deleteContribution(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
