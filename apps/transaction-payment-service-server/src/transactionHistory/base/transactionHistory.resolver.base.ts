/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TransactionHistory } from "./TransactionHistory";
import { TransactionHistoryCountArgs } from "./TransactionHistoryCountArgs";
import { TransactionHistoryFindManyArgs } from "./TransactionHistoryFindManyArgs";
import { TransactionHistoryFindUniqueArgs } from "./TransactionHistoryFindUniqueArgs";
import { CreateTransactionHistoryArgs } from "./CreateTransactionHistoryArgs";
import { UpdateTransactionHistoryArgs } from "./UpdateTransactionHistoryArgs";
import { DeleteTransactionHistoryArgs } from "./DeleteTransactionHistoryArgs";
import { TransactionHistoryService } from "../transactionHistory.service";
@graphql.Resolver(() => TransactionHistory)
export class TransactionHistoryResolverBase {
  constructor(protected readonly service: TransactionHistoryService) {}

  async _transactionHistoriesMeta(
    @graphql.Args() args: TransactionHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TransactionHistory])
  async transactionHistories(
    @graphql.Args() args: TransactionHistoryFindManyArgs
  ): Promise<TransactionHistory[]> {
    return this.service.transactionHistories(args);
  }

  @graphql.Query(() => TransactionHistory, { nullable: true })
  async transactionHistory(
    @graphql.Args() args: TransactionHistoryFindUniqueArgs
  ): Promise<TransactionHistory | null> {
    const result = await this.service.transactionHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TransactionHistory)
  async createTransactionHistory(
    @graphql.Args() args: CreateTransactionHistoryArgs
  ): Promise<TransactionHistory> {
    return await this.service.createTransactionHistory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TransactionHistory)
  async updateTransactionHistory(
    @graphql.Args() args: UpdateTransactionHistoryArgs
  ): Promise<TransactionHistory | null> {
    try {
      return await this.service.updateTransactionHistory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TransactionHistory)
  async deleteTransactionHistory(
    @graphql.Args() args: DeleteTransactionHistoryArgs
  ): Promise<TransactionHistory | null> {
    try {
      return await this.service.deleteTransactionHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
